---
- name: Multi-OS AWS VM Provisioning with Terraform
  hosts: localhost
  gather_facts: false

  vars:
    vm_name: "{{ name }}"
    vm_os_input: "{{ os }}"
    vm_flavor_raw: "{{ flavor }}"
    cloud_init_raw: "{{ cloudInit }}"
    terraform_dir: /tmp/cloud-vm-provision/terraform
    terraform_version: "1.6.6" # or your preferred version

  tasks:
    - name: Map OS to AMI filters
      set_fact:
        os_map:
          ubuntu-22.04:
            name: "ubuntu/images/hvm-ssd/ubuntu-22.04-amd64-server-*"
            owner: "099720109477"
          redhat-9:
            name: "RHEL-9*_HVM-*-x86_64-*"
            owner: "309956199498"
          centos-9:
            name: "CentOS Stream 9 x86_64*"
            owner: "125523088429"
          debian-12:
            name: "debian-12-amd64-*"
            owner: "136693071363"
          windows-2022:
            name: "Windows_Server-2022-English-Full-Base-*"
            owner: "801119661308"

    - name: Set AMI filter vars
      set_fact:
        ami_name_filter: "{{ os_map[vm_os_input].name }}"
        ami_owner: "{{ os_map[vm_os_input].owner }}"

    - name: Map flavor to EC2 instance type
      set_fact:
        vm_flavor: >-
          {% if vm_flavor_raw == 'small' %} t2.small
          {% elif vm_flavor_raw == 'medium' %} t2.medium
          {% elif vm_flavor_raw == 'large' %} t2.large
          {% else %} t2.micro {% endif %}

    - name: Encode cloud-init to base64
      set_fact:
        cloud_init: "{{ cloud_init_raw | b64encode }}"

    - name: Install unzip (required to extract Terraform)
      ansible.builtin.package:
        name: unzip
        state: present
      become: true

    - name: Download Terraform CLI
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: "/tmp/terraform_{{ terraform_version }}.zip"
        mode: "0644"

    - name: Unarchive Terraform CLI
      ansible.builtin.unarchive:
        src: "/tmp/terraform_{{ terraform_version }}.zip"
        dest: /usr/local/bin/
        remote_src: yes
      become: true

    - name: Ensure Terraform is executable
      ansible.builtin.file:
        path: /usr/local/bin/terraform
        mode: "0755"
      become: true

    - name: Clone Terraform project
      ansible.builtin.git:
        repo: https://github.com/khalilMaat/cloud-vm-provision.git
        dest: "{{ terraform_dir }}"
        force: yes

    - name: Initialize Terraform
      ansible.builtin.command:
        cmd: terraform init
        chdir: "{{ terraform_dir }}"

    - name: Apply Terraform
      ansible.builtin.command:
        cmd: >
          terraform apply -auto-approve
          -var="vm_name={{ vm_name }}"
          -var="vm_os={{ vm_os_input }}"
          -var="vm_flavor={{ vm_flavor }}"
          -var="cloud_init={{ cloud_init }}"
          -var="ami_owner={{ ami_owner }}"
          -var="ami_name_filter={{ ami_name_filter }}"
        chdir: "{{ terraform_dir }}"
