---
- name: Simplified AWS VM Provisioning
  hosts: ansible1
  gather_facts: false

  vars:
    vm_name: "{{ vm_name | default('test-vm') }}"
    vm_flavor_raw: "{{ vm_flavor | default('small') }}"
    vm_os: "{{ vm_os | default('ubuntu-22.04') }}"
    cloud_init_raw: "{{ cloud_init | default('#cloud-config\npackage_upgrade: true') }}"

    os_ami_map:
      ubuntu-22.04: "ami-0c7217cdde317cfec"
      redhat-9: "ami-0b0af3577fe5e3532"

    flavor_map:
      small: "t3.small"
      medium: "t3.medium"
      large: "t3.large"

  tasks:
    - name: Validate OS selection
      fail:
        msg: "Unsupported OS '{{ vm_os }}'. Valid options: {{ os_ami_map.keys() | list }}"
      when: vm_os not in os_ami_map

    - name: Prepare cloud-init
      set_fact:
        cloud_init: "{{ cloud_init_raw | b64encode }}"

    - name: Clone Terraform project
      ansible.builtin.git:
        repo: https://github.com/khalilMaat/cloud-vm-provision.git
        dest: /tmp/cloud-vm-provision
        force: yes

    - name: Debug AWS environment variables
      debug:
        msg:
          - "AWS_ACCESS_KEY_ID present: {{ 'AWS_ACCESS_KEY_ID' in ansible_env }}"
          - "AWS_SECRET_ACCESS_KEY present: {{ 'AWS_SECRET_ACCESS_KEY' in ansible_env }}"
          - "AWS_SESSION_TOKEN present: {{ 'AWS_SESSION_TOKEN' in ansible_env }}"

    - name: Initialize Terraform
      command: terraform init
      args:
        chdir: "/tmp/cloud-vm-provision/terraform"

    - name: Apply Terraform configuration
      command: |
        terraform apply -auto-approve \
        -var="vm_name={{ vm_name }}" \
        -var="vm_flavor={{ flavor_map[vm_flavor_raw] | default('t3.micro') }}" \
        -var="cloud_init={{ cloud_init }}" \
        -var="ami_id={{ os_ami_map[vm_os] }}"
      args:
        chdir: "/tmp/cloud-vm-provision/terraform"
